/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Manager.GUI;

import Auth.GUI.Login_UI;
import Manager.Controller.ManagerController;
import static Manager.GUI.DebtStatistic_UI.MNID;
import static Manager.GUI.DebtStatistic_UI.model;
import static Manager.GUI.DetailInformation_UI.MNID;
import Patient.Controller.patient_controller;
import Patient.GUI.patient_payment_confirm;
import Patient.Model.Patient;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HOME
 */
public class FormAddManagedPerson_UI extends javax.swing.JFrame {

    /**
     * Creates new form FormAddManagedPerson
     */
    ManagerController manager = new ManagerController();
    static String MNID = "";
    static patient_controller control = new patient_controller();
    ArrayList<String[]> hopitals = null;

    public FormAddManagedPerson_UI(String mnid) {
        initComponents();
        this.setLocationRelativeTo(null);
        MNID = mnid;
        hopitals = manager.view_Isolation_Area_List();
        for (String[] h : hopitals) {
            MPPlace.add(h[1]);
        }
        ArrayList<String> citylist = manager.getCity();
        for (String i : citylist) {
            cityChoice.add(i);
        }
        ArrayList<String> districtList = manager.getDistrictofCity(cityChoice.getSelectedItem());
        for (String i : districtList) {
            districtChoice.add(i);
        }
        ArrayList<String> wardList = manager.getWardofDistrict(districtChoice.getSelectedItem());
        for (String i : wardList) {
            wardChoice.add(i);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        MPState = new javax.swing.JTextField();
        MPDOB = new javax.swing.JTextField();
        MPID = new javax.swing.JTextField();
        MPName = new javax.swing.JTextField();
        MPRelatedID = new javax.swing.JTextField();
        cityChoice = new java.awt.Choice();
        districtChoice = new java.awt.Choice();
        wardChoice = new java.awt.Choice();
        jLabel9 = new javax.swing.JLabel();
        MPAddr = new javax.swing.JTextField();
        MPPlace = new java.awt.Choice();
        jButton2 = new javax.swing.JButton();
        addButton = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Covid Info Management - Manager");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("THÊM NGƯỜI LIÊN QUAN COVID");

        jButton1.setText("Đăng xuất");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Họ và tên:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("CMND/CCCD:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Ngày sinh");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Địa chỉ nơi ở:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Trạng thái hiện tại:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Nơi điều trị:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("CCCD nguồn tiếp xúc:");

        MPState.setText("0/1/2/3");
        MPState.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MPStateMouseClicked(evt);
            }
        });

        MPDOB.setText("YYYY-MM-DD");
        MPDOB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MPDOBMouseClicked(evt);
            }
        });

        MPName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MPNameActionPerformed(evt);
            }
        });

        MPRelatedID.setText("CCCD:");
        MPRelatedID.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MPRelatedIDMouseClicked(evt);
            }
        });

        cityChoice.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cityChoiceItemStateChanged(evt);
            }
        });

        districtChoice.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                districtChoiceItemStateChanged(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("TP/Quận /Huyện");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel6)
                                .addComponent(jLabel2)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5)
                                .addComponent(jLabel7))
                            .addGap(27, 27, 27))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel8)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cityChoice, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(districtChoice, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wardChoice, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(MPState)
                    .addComponent(MPDOB)
                    .addComponent(MPID)
                    .addComponent(MPName)
                    .addComponent(MPRelatedID, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(MPAddr)
                    .addComponent(MPPlace, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(MPName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(MPID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(MPDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(MPAddr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(districtChoice, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                    .addComponent(wardChoice, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cityChoice, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MPState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(MPPlace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MPRelatedID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addContainerGap())
        );

        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        addButton.setText("Thêm");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addButton)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MPNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MPNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MPNameActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        super.dispose();
        CovidManagement_UI.main(null, MNID);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void MPRelatedIDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MPRelatedIDMouseClicked
        // TODO add your handling code here:
        MPRelatedID.setText("");
    }//GEN-LAST:event_MPRelatedIDMouseClicked

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        String relatedPerson = null;
        String newHopital = MPPlace.getSelectedItem().toString();
        for (String[] h : hopitals) {
            if (h[1].equals(newHopital)) {
                newHopital = h[0];
            }
        }
        if (MPState.getText().equals("0")) {
            if (!MPRelatedID.getText().equals("")) {
                relatedPerson = MPRelatedID.getText();
            }
            if (MPName.getText().equals("") || MPID.getText().equals("")
                    || MPDOB.getText().equals("") || MPAddr.getText().equals("")
                    || MPState.getText().equals("")) {
                showMessageDialog(null, "Thông tin cần thêm không đầy đủ .\nCần điền đủ thông tin cho người được quản lý mới.");
            } else {
                String addr = MPAddr.getText() + " - " + cityChoice.getSelectedItem() + " - " + districtChoice.getSelectedItem() + " - "
                        + wardChoice.getSelectedItem();
                Patient newp = new Patient(MPName.getText(), MPID.getText(), addr,
                        MPState.getText(), newHopital, relatedPerson,
                        java.sql.Date.valueOf(MPDOB.getText()), 0);
                int er = manager.add_newPatient(this.MNID, newp);
                if (er == -1) {
                    showMessageDialog(null, "Người được thêm đã tồn tại trong danh sách \nngười liên quan đến covid được quản lý");
                }
                if (er == 0) {
                    showMessageDialog(null, "Không tồn tại nguồn lây nhiễm trong danh sách \nngười liên quan đến covid được quản lý");
                }
                if (er == 1) {
                    showMessageDialog(null, "Người được quản lý mới đã được thêm vào danh sách.");
                    String msg = "";

                    msg = "addaccount " + MPID.getText() + " 1000000000 " + java.time.LocalDate.now().toString();
                    String encodingType = "utf-8";
                    String encodedString = null;
                    try {
                        encodedString = Base64.getEncoder().encodeToString(msg.getBytes(encodingType));
                    } catch (UnsupportedEncodingException ex) {
                        Logger.getLogger(patient_payment_confirm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    try {
                        int portnumber = 4321;

                        String msgrep = "";
                        Socket client = new Socket(InetAddress.getLocalHost(), portnumber);
                        DataInputStream clientin = new DataInputStream(client.getInputStream());
                        DataOutputStream clientout = new DataOutputStream(client.getOutputStream());

                        clientout.writeUTF(encodedString);
                        msgrep = clientin.readUTF();
                        byte[] decodedBytes = Base64.getDecoder().decode(msgrep);
                        String decodedString = "";
                        try {
                            decodedString = new String(decodedBytes, encodingType);
                        } catch (UnsupportedEncodingException ex) {
                            Logger.getLogger(patient_payment_confirm.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        client.close();

                        if (decodedString.equals("1")) {
                            showMessageDialog(null, "/nThêm tài khoản thanh toán thành công.");
                        }
                        if (decodedString.equals("0")) {
                            showMessageDialog(null, "/nThêm tài khoản thanh toán không thành công.");
                        }
                        if (decodedString.equals("-1")) {
                            showMessageDialog(null, "/nĐã tồn tại tài khoản thanh toán.");
                        }
                    } catch (Exception ex) {
                        System.out.println("Error " + ex);
                    }
                }
            }

        } else {
            if (MPName.getText().equals("") || MPID.getText().equals("")
                    || MPDOB.getText().equals("") || MPAddr.getText().equals("")
                    || MPState.getText().equals("")
                    || MPRelatedID.getText().equals("")) {
                showMessageDialog(null, "Thông tin cần thêm không đầy đủ .\nCần điền đủ thông tin cho người được quản lý mới.");
            } else {
                String addr = MPAddr.getText() + " - " + cityChoice.getSelectedItem() + " - " + districtChoice.getSelectedItem() + " - "
                        + wardChoice.getSelectedItem();
                Patient newp = new Patient(MPName.getText(), MPID.getText(), addr,
                        MPState.getText(), newHopital, MPRelatedID.getText(),
                        java.sql.Date.valueOf(MPDOB.getText()), 0);
                int er = manager.add_newPatient(this.MNID, newp);
                if (er == -1) {
                    showMessageDialog(null, "Người được thêm đã tồn tại trong danh sách \nngười liên quan đến covid được quản lý");
                }
                if (er == 0) {
                    showMessageDialog(null, "Không tồn tại nguồn lây nhiễm trong danh sách \nngười liên quan đến covid được quản lý");
                }
                if (er == 1) {
                    showMessageDialog(null, "Người được quản lý mới đã được thêm vào danh sách.");
                    String msg = "";

                    msg = "addaccount " + MPID.getText() + " 1000000000 " + java.time.LocalDate.now().toString();
                    String encodingType = "utf-8";
                    String encodedString = null;
                    try {
                        encodedString = Base64.getEncoder().encodeToString(msg.getBytes(encodingType));
                    } catch (UnsupportedEncodingException ex) {
                        Logger.getLogger(patient_payment_confirm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    try {
                        int portnumber = 4321;

                        String msgrep = "";
                        Socket client = new Socket(InetAddress.getLocalHost(), portnumber);
                        DataInputStream clientin = new DataInputStream(client.getInputStream());
                        DataOutputStream clientout = new DataOutputStream(client.getOutputStream());

                        clientout.writeUTF(encodedString);
                        msgrep = clientin.readUTF();
                        byte[] decodedBytes = Base64.getDecoder().decode(msgrep);
                        String decodedString = "";
                        try {
                            decodedString = new String(decodedBytes, encodingType);
                        } catch (UnsupportedEncodingException ex) {
                            Logger.getLogger(patient_payment_confirm.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        client.close();

                        if (decodedString.equals("1")) {
                            showMessageDialog(null, "/nThêm tài khoản thanh toán thành công.");
                        }
                        if (decodedString.equals("0")) {
                            showMessageDialog(null, "/nThêm tài khoản thanh toán không thành công.");
                        }
                        if (decodedString.equals("-1")) {
                            showMessageDialog(null, "/nĐã tồn tại tài khoản thanh toán.");
                        }
                    } catch (Exception ex) {
                        System.out.println("Error " + ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void MPDOBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MPDOBMouseClicked
        // TODO add your handling code here:
        MPDOB.setText("");
    }//GEN-LAST:event_MPDOBMouseClicked

    private void MPStateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MPStateMouseClicked
        // TODO add your handling code here:
        MPState.setText("");
    }//GEN-LAST:event_MPStateMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        super.dispose();
        Login_UI.main(null);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cityChoiceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cityChoiceItemStateChanged
        // TODO add your handling code here:
        ArrayList<String> districtList = manager.getDistrictofCity(cityChoice.getSelectedItem());
        districtChoice.removeAll();
        for (String i : districtList) {
            districtChoice.add(i);
        }
        wardChoice.removeAll();
        ArrayList<String> wardList = manager.getWardofDistrict(districtChoice.getSelectedItem());
        for (String i : wardList) {
            wardChoice.add(i);
        }
    }//GEN-LAST:event_cityChoiceItemStateChanged

    private void districtChoiceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_districtChoiceItemStateChanged
        // TODO add your handling code here:
        ArrayList<String> wardList = manager.getWardofDistrict(districtChoice.getSelectedItem());
        wardChoice.removeAll();
        for (String i : wardList) {
            wardChoice.add(i);
        }
    }//GEN-LAST:event_districtChoiceItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[], String mnID) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormAddManagedPerson_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormAddManagedPerson_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormAddManagedPerson_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormAddManagedPerson_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormAddManagedPerson_UI(mnID).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField MPAddr;
    private javax.swing.JTextField MPDOB;
    private javax.swing.JTextField MPID;
    private javax.swing.JTextField MPName;
    private java.awt.Choice MPPlace;
    private javax.swing.JTextField MPRelatedID;
    private javax.swing.JTextField MPState;
    private javax.swing.JButton addButton;
    private java.awt.Choice cityChoice;
    private java.awt.Choice districtChoice;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private java.awt.Choice wardChoice;
    // End of variables declaration//GEN-END:variables
}
